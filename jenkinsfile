def registry = "https://larafaakram.jfrog.io/"

pipeline {
    agent {label 'maven'}

environment {
    PATH = "/opt/apache-maven-3.9.4/bin:$PATH"
}
    stages {
        stage("build"){
            steps{
                echo "-------build started ---------"
                sh 'mvn clean deploy -Dmaven.test.skip=true'
                echo "-------build complated ---------"
            }
        }
        stage('test'){
            steps{
                echo "-------unit test started ---------"
                sh 'mvn surefire-report:report'
                echo "-------unit test complated ---------"
                sh 'printenv > env.txt'
            }
        }
       /* stage('SonarQube analysis'){
            environment{
                scannerHome = tool 'sonar-scanner'
            }
            steps{
                withSonarQubeEnv('sonar-server') {
                    dir(env.WORKSPACE) {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
                // -Dsonar.scanner.metadataFilePath=${scannerHome}/bin/report-task.txt
            }
        }
        stage('Quality Gate'){
            //options {
                // Timeout counter starts BEFORE agent is allocated
            //    timeout(time: 1, unit: 'HOURS')
            //}
            steps{
                withSonarQubeEnv('sonar-server') {
                    dir(env.WORKSPACE) {
                        script {
                            timeout(time: 1, unit: 'HOURS') {
                            def qg = waitForQualityGate()
                            if (qg.status != 'OK') {
                                error " Pipeline aborted duei to quality gate failure: ${qg.status}"
                                }
                            }
                        }
                    }
                }
            }
        }*/
        stage('Publish jar'){
            steps {
                script {
                    echo '<--------------- Jar Publish Started --------------->'
                    def server = Artifactory.newServer url:registry+"/artifactory" , credentialsId:"artifactory_token"
                    def properties = "buildid=${env.BUILD_ID},commitid=${GIT_COMMIT}";
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "jarstaging/(*)",
                                "target": "larafa-libs-release-local/{1}",
                                "flat": "false",
                                "props" : "${properties}",
                                "exclusions": [ "*.sha1", "*.md5"]
                            }
                        ]
                    }"""
                    def buildInfo = server.upload(uploadSpec)
                    buildInfo.env.collect()
                    server.publishBuildInfo(buildInfo)
                    echo '<--------------- Jar Publish Ended --------------->'
                }
            }
        }
    }
}